// Êñ∞ÈóªÂ§ÑÁêÜÂô®Ê®°Âùó
const newsService = require('../services/newsService');
const { NEWS_CATEGORIES_KEYBOARD, BACK_TO_CATEGORIES_BUTTON, WEB3_MAIN_KEYBOARD } = require('../constants/keyboards');

class NewsHandler {
  constructor(bot) {
    this.bot = bot;
    this.PAGE_SIZE = 6; // ÊØèÈ°µÊòæÁ§∫6Êù°Êñ∞Èóª
  }

  // Â§ÑÁêÜÊñ∞ÈóªÂëΩ‰ª§
  async handleNewsCommand(msg, page = 1) {
    const chatId = msg.chat.id;
    
    try {
      const { news, total, totalPages } = await newsService.getNewsList({ page, limit: this.PAGE_SIZE });
      if (!news || news.length === 0) {
        await this.bot.sendMessage(chatId, 'üì∞ ÊöÇÊó†Êñ∞Èóª');
        return;
      }

      let message = `üì∞ ÊúÄÊñ∞Êñ∞Èóª (Á¨¨${page}È°µÔºåÂÖ±${totalPages}È°µ)\n\n`;
      news.forEach((item, index) => {
        const url = item.sourceUrl || '#';
        const title = item.title?.replace(/</g, '&lt;').replace(/>/g, '&gt;') || '';
        const globalIndex = (page - 1) * this.PAGE_SIZE + index + 1;
        message += `${globalIndex}. <a href="${url}">${title}</a>\n`;
        message += `   Êù•Ê∫êÔºö${item.source}\n`;
        message += `   Êó∂Èó¥Ôºö${new Date(item.publishTime).toLocaleString('zh-CN')}\n\n`;
      });

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üî• ÁÉ≠Èó®Êñ∞Èóª', callback_data: 'news_hot' },
            { text: 'üìä Êñ∞ÈóªÁªüËÆ°', callback_data: 'news_stats' }
          ],
          [
            { text: 'üè∑Ô∏è Êñ∞ÈóªÂàÜÁ±ª', callback_data: 'news_categories' },
            { text: 'üîç ÊêúÁ¥¢Êñ∞Èóª', callback_data: 'news_search' }
          ]
        ]
      };

      // Ê∑ªÂä†ÂàÜÈ°µÊåâÈíÆ
      if (totalPages > 1) {
        const paginationRow = [];
        if (page > 1) {
          paginationRow.push({ text: '‚óÄÔ∏è ‰∏ä‰∏ÄÈ°µ', callback_data: `news_page_${page - 1}` });
        }
        paginationRow.push({ text: `${page}/${totalPages}`, callback_data: 'page_info' });
        if (page < totalPages) {
          paginationRow.push({ text: '‰∏ã‰∏ÄÈ°µ ‚ñ∂Ô∏è', callback_data: `news_page_${page + 1}` });
        }
        keyboard.inline_keyboard.push(paginationRow);
      }

      await this.bot.sendMessage(chatId, message, {
        reply_markup: keyboard,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });
    } catch (error) {
      console.error('Ëé∑ÂèñÊñ∞ÈóªÂ§±Ë¥•:', error);
      await this.bot.sendMessage(chatId, '‚ùå Ëé∑ÂèñÊñ∞ÈóªÂ§±Ë¥•ÔºåËØ∑ÈáçËØï');
    }
  }

  // Â§ÑÁêÜÁÉ≠Èó®Êñ∞Èóª
  async handleHotNews(callbackQuery, page = 1) {
    const chatId = callbackQuery.message.chat.id;
    
    try {
      // Ëé∑ÂèñÊâÄÊúâÁÉ≠Èó®Êñ∞ÈóªÔºåÁÑ∂ÂêéÊâãÂä®ÂàÜÈ°µ
      const allHotNews = await newsService.getHotNews(100); // Ëé∑ÂèñË∂≥Â§üÂ§öÁöÑÁÉ≠Èó®Êñ∞Èóª
      if (!allHotNews || allHotNews.length === 0) {
        await this.bot.answerCallbackQuery(callbackQuery.id, 'üì∞ ÊöÇÊó†ÁÉ≠Èó®Êñ∞Èóª');
        return;
      }

      const totalPages = Math.ceil(allHotNews.length / this.PAGE_SIZE);
      const startIndex = (page - 1) * this.PAGE_SIZE;
      const endIndex = startIndex + this.PAGE_SIZE;
      const pageNews = allHotNews.slice(startIndex, endIndex);

      let message = `üî• ÁÉ≠Èó®Êñ∞Èóª (Á¨¨${page}È°µÔºåÂÖ±${totalPages}È°µ)\n\n`;
      pageNews.forEach((item, index) => {
        const url = item.sourceUrl || '#';
        const title = item.title?.replace(/</g, '&lt;').replace(/>/g, '&gt;') || '';
        const globalIndex = startIndex + index + 1;
        message += `${globalIndex}. <a href="${url}">${title}</a>\n`;
        message += `   ÁÉ≠Â∫¶Ôºö${item.viewCount ?? 0} Ê¨°ÊµèËßà\n`;
        message += `   Êù•Ê∫êÔºö${item.source}\n`;
        message += `   Êó∂Èó¥Ôºö${new Date(item.publishTime).toLocaleString('zh-CN')}\n\n`;
      });

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üì∞ ÊúÄÊñ∞Êñ∞Èóª', callback_data: 'news_latest' },
            { text: 'üîô ËøîÂõû', callback_data: 'news_back' }
          ]
        ]
      };

      // Ê∑ªÂä†ÂàÜÈ°µÊåâÈíÆ
      if (totalPages > 1) {
        const paginationRow = [];
        if (page > 1) {
          paginationRow.push({ text: '‚óÄÔ∏è ‰∏ä‰∏ÄÈ°µ', callback_data: `hot_page_${page - 1}` });
        }
        paginationRow.push({ text: `${page}/${totalPages}`, callback_data: 'page_info' });
        if (page < totalPages) {
          paginationRow.push({ text: '‰∏ã‰∏ÄÈ°µ ‚ñ∂Ô∏è', callback_data: `hot_page_${page + 1}` });
        }
        keyboard.inline_keyboard.push(paginationRow);
      }

      await this.bot.sendMessage(chatId, message, {
        reply_markup: keyboard,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });

      await this.bot.answerCallbackQuery(callbackQuery.id, 'üî• ÁÉ≠Èó®Êñ∞ÈóªÂ∑≤ÊòæÁ§∫');
    } catch (error) {
      console.error('Ëé∑ÂèñÁÉ≠Èó®Êñ∞ÈóªÂ§±Ë¥•:', error);
      await this.bot.answerCallbackQuery(callbackQuery.id, '‚ùå Ëé∑ÂèñÁÉ≠Èó®Êñ∞ÈóªÂ§±Ë¥•');
    }
  }

  // Â§ÑÁêÜÊñ∞ÈóªÂàÜÁ±ª
  async handleNewsCategories(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    
    try {
      const categories = await newsService.getNewsCategories();
      if (!categories || categories.length === 0) {
        await this.bot.answerCallbackQuery(callbackQuery.id, 'üè∑Ô∏è ÊöÇÊó†Êñ∞ÈóªÂàÜÁ±ª');
        return;
      }

      const keyboard = {
        inline_keyboard: [
          ...categories.map(cat => [{
            text: `${cat.icon} ${cat.displayName || cat.name}`,
            callback_data: `category_${cat.id}`
          }]),
          [
            { text: 'üîô ËøîÂõû', callback_data: 'news_back' }
          ]
        ]
      };

      await this.bot.sendMessage(chatId, 'üè∑Ô∏è ÈÄâÊã©Êñ∞ÈóªÂàÜÁ±ªÔºö', {
        reply_markup: keyboard
      });

      await this.bot.answerCallbackQuery(callbackQuery.id, 'üè∑Ô∏è ËØ∑ÈÄâÊã©ÂàÜÁ±ª');
    } catch (error) {
      console.error('Ëé∑ÂèñÊñ∞ÈóªÂàÜÁ±ªÂ§±Ë¥•:', error);
      await this.bot.answerCallbackQuery(callbackQuery.id, '‚ùå Ëé∑ÂèñÂàÜÁ±ªÂ§±Ë¥•');
    }
  }

  // Â§ÑÁêÜÂàÜÁ±ªÊñ∞Èóª
  async handleCategoryNews(callbackQuery, categoryId, page = 1) {
    const chatId = callbackQuery.message.chat.id;
    
    try {
      const { news, total, totalPages } = await newsService.getNewsList({ categoryId, page, limit: this.PAGE_SIZE });
      if (!news || news.length === 0) {
        await this.bot.answerCallbackQuery(callbackQuery.id, 'üì∞ ËØ•ÂàÜÁ±ªÊöÇÊó†Êñ∞Èóª');
        return;
      }

      // Ëé∑ÂèñÂàÜÁ±ªÊòæÁ§∫ÂêçÁß∞
      let headerName = 'ÂàÜÁ±ª';
      try {
        const categories = await newsService.getNewsCategories();
        const cat = categories.find(c => c.id === categoryId);
        if (cat) headerName = cat.displayName || cat.name;
      } catch (_) {}

      let message = `üì∞ ${headerName} ÂàÜÁ±ªÊñ∞Èóª (Á¨¨${page}È°µÔºåÂÖ±${totalPages}È°µ)\n\n`;
      
      news.forEach((item, index) => {
        const url = item.sourceUrl || '#';
        const title = item.title?.replace(/</g, '&lt;').replace(/>/g, '&gt;') || '';
        const globalIndex = (page - 1) * this.PAGE_SIZE + index + 1;
        message += `${globalIndex}. <a href="${url}">${title}</a>\n`;
        message += `   Êù•Ê∫êÔºö${item.source}\n`;
        message += `   Êó∂Èó¥Ôºö${new Date(item.publishTime).toLocaleString('zh-CN')}\n\n`;
      });

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üîô ËøîÂõûÂàÜÁ±ª', callback_data: 'news_categories' },
            { text: 'üì∞ ÊúÄÊñ∞Êñ∞Èóª', callback_data: 'news_latest' }
          ]
        ]
      };

      // Ê∑ªÂä†ÂàÜÈ°µÊåâÈíÆ
      if (totalPages > 1) {
        const paginationRow = [];
        if (page > 1) {
          paginationRow.push({ text: '‚óÄÔ∏è ‰∏ä‰∏ÄÈ°µ', callback_data: `category_page_${categoryId}_${page - 1}` });
        }
        paginationRow.push({ text: `${page}/${totalPages}`, callback_data: 'page_info' });
        if (page < totalPages) {
          paginationRow.push({ text: '‰∏ã‰∏ÄÈ°µ ‚ñ∂Ô∏è', callback_data: `category_page_${categoryId}_${page + 1}` });
        }
        keyboard.inline_keyboard.push(paginationRow);
      }

      await this.bot.sendMessage(chatId, message, {
        reply_markup: keyboard,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });

      await this.bot.answerCallbackQuery(callbackQuery.id, `üì∞ ${headerName} Êñ∞ÈóªÂ∑≤ÊòæÁ§∫`);
    } catch (error) {
      console.error('Ëé∑ÂèñÂàÜÁ±ªÊñ∞ÈóªÂ§±Ë¥•:', error);
      await this.bot.answerCallbackQuery(callbackQuery.id, '‚ùå Ëé∑ÂèñÂàÜÁ±ªÊñ∞ÈóªÂ§±Ë¥•');
    }
  }

  // Â§ÑÁêÜÊñ∞ÈóªÊêúÁ¥¢
  async handleNewsSearch(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    
    try {
      await this.bot.sendMessage(chatId, 'üîç Êñ∞ÈóªÊêúÁ¥¢\n\nËØ∑ËæìÂÖ•ÊêúÁ¥¢ÂÖ≥ÈîÆËØçÔºö');
      await this.bot.answerCallbackQuery(callbackQuery.id, 'üîç ËØ∑ËæìÂÖ•ÊêúÁ¥¢ÂÖ≥ÈîÆËØç');
    } catch (error) {
      console.error('Â§ÑÁêÜÊñ∞ÈóªÊêúÁ¥¢Â§±Ë¥•:', error);
      await this.bot.answerCallbackQuery(callbackQuery.id, '‚ùå ÊêúÁ¥¢ÂäüËÉΩÂºÇÂ∏∏');
    }
  }

  // ÊâßË°åÊñ∞ÈóªÊêúÁ¥¢
  async executeNewsSearch(chatId, keyword, page = 1) {
    try {
      const result = await newsService.searchNews(keyword, { page, limit: this.PAGE_SIZE });
      const items = result.news || [];
      if (items.length === 0) {
        await this.bot.sendMessage(chatId, `üîç ÊêúÁ¥¢ "${keyword}" Ê≤°ÊúâÊâæÂà∞Áõ∏ÂÖ≥Êñ∞Èóª`);
        return;
      }

      let message = `üîç ÊêúÁ¥¢ "${keyword}" ÁªìÊûú (Á¨¨${page}È°µÔºåÂÖ±${result.totalPages}È°µ)Ôºö\n\n`;
      items.forEach((item, index) => {
        const url = item.sourceUrl || '#';
        const title = item.title?.replace(/</g, '&lt;').replace(/>/g, '&gt;') || '';
        const globalIndex = (page - 1) * this.PAGE_SIZE + index + 1;
        message += `${globalIndex}. <a href="${url}">${title}</a>\n`;
        message += `   Êù•Ê∫êÔºö${item.source}\n`;
        message += `   Êó∂Èó¥Ôºö${new Date(item.publishTime).toLocaleString('zh-CN')}\n\n`;
      });

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üîç ÁªßÁª≠ÊêúÁ¥¢', callback_data: 'news_search' },
            { text: 'üì∞ ËøîÂõûÊñ∞Èóª', callback_data: 'news_back' }
          ]
        ]
      };

      // Ê∑ªÂä†ÂàÜÈ°µÊåâÈíÆ
      if (result.totalPages > 1) {
        const paginationRow = [];
        if (page > 1) {
          paginationRow.push({ text: '‚óÄÔ∏è ‰∏ä‰∏ÄÈ°µ', callback_data: `search_page_${keyword}_${page - 1}` });
        }
        paginationRow.push({ text: `${page}/${result.totalPages}`, callback_data: 'page_info' });
        if (page < result.totalPages) {
          paginationRow.push({ text: '‰∏ã‰∏ÄÈ°µ ‚ñ∂Ô∏è', callback_data: `search_page_${keyword}_${page + 1}` });
        }
        keyboard.inline_keyboard.push(paginationRow);
      }

      await this.bot.sendMessage(chatId, message, {
        reply_markup: keyboard,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });
    } catch (error) {
      console.error('ÊâßË°åÊñ∞ÈóªÊêúÁ¥¢Â§±Ë¥•:', error);
      await this.bot.sendMessage(chatId, '‚ùå ÊêúÁ¥¢Â§±Ë¥•ÔºåËØ∑ÈáçËØï');
    }
  }

  // Â§ÑÁêÜÊñ∞ÈóªÁªüËÆ°
  async handleNewsStats(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    
    try {
      const stats = await newsService.getNewsStats();
      const message = `üìä Êñ∞ÈóªÁªüËÆ°\n\n` +
                      `üì∞ ÊÄªÊñ∞ÈóªÊï∞Ôºö${stats.totalNews}\n` +
                      `üóÇÔ∏è ÂàÜÁ±ªÊï∞ÈáèÔºö${stats.totalCategories}\n` +
                      `üî• ÁÉ≠Èó®Êñ∞ÈóªÊï∞Ôºö${stats.hotNewsCount}\n` +
                      `üìå ÁΩÆÈ°∂Êñ∞ÈóªÊï∞Ôºö${stats.topNewsCount}`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üì∞ ÊúÄÊñ∞Êñ∞Èóª', callback_data: 'news_latest' },
            { text: 'üîô ËøîÂõû', callback_data: 'news_back' }
          ]
        ]
      };

      await this.bot.sendMessage(chatId, message, {
        reply_markup: keyboard
      });

      await this.bot.answerCallbackQuery(callbackQuery.id, 'üìä ÁªüËÆ°‰ø°ÊÅØÂ∑≤ÊòæÁ§∫');
    } catch (error) {
      console.error('Ëé∑ÂèñÊñ∞ÈóªÁªüËÆ°Â§±Ë¥•:', error);
      await this.bot.answerCallbackQuery(callbackQuery.id, '‚ùå Ëé∑ÂèñÁªüËÆ°Â§±Ë¥•');
    }
  }

  // Â§ÑÁêÜÊñ∞ÈóªÂõûË∞É
  async handleNewsCallback(callbackQuery) {
    try {
      const { data } = callbackQuery;
      const chatId = callbackQuery.message.chat.id;

      if (data === 'news_latest') {
        await this.handleNewsCommand(callbackQuery.message);
      } else if (data === 'news_hot') {
        await this.handleHotNews(callbackQuery.message);
      } else if (data === 'news_categories') {
        await this.handleNewsCategories(callbackQuery.message);
      } else if (data === 'news_search') {
        await this.handleNewsSearch(callbackQuery.message);
      } else if (data.startsWith('category_')) {
        const categoryId = data.replace('category_', '');
        await this.handleCategoryNews(callbackQuery.message, categoryId);
      } else if (data.startsWith('news_page_')) {
        // Â§ÑÁêÜÊñ∞ÈóªÂàÜÈ°µ
        const page = parseInt(data.replace('news_page_', ''));
        await this.handleNewsCommand(callbackQuery.message, page);
      } else if (data.startsWith('hot_page_')) {
        // Â§ÑÁêÜÁÉ≠Èó®Êñ∞ÈóªÂàÜÈ°µ
        const page = parseInt(data.replace('hot_page_', ''));
        await this.handleHotNews(callbackQuery.message, page);
      } else if (data.startsWith('category_page_')) {
        // Â§ÑÁêÜÂàÜÁ±ªÊñ∞ÈóªÂàÜÈ°µ
        const parts = data.replace('category_page_', '').split('_');
        const categoryId = parts[0];
        const page = parseInt(parts[1]);
        await this.handleCategoryNews(callbackQuery.message, categoryId, page);
      } else if (data.startsWith('search_page_')) {
        // Â§ÑÁêÜÊêúÁ¥¢ÂàÜÈ°µ
        const parts = data.replace('search_page_', '').split('_');
        const keyword = parts[0];
        const page = parseInt(parts[1]);
        await this.executeNewsSearch(callbackQuery.message.chat.id, keyword, page);
      } else if (data === 'page_info') {
        // ÂàÜÈ°µ‰ø°ÊÅØÊåâÈíÆ
        await this.bot.answerCallbackQuery(callbackQuery.id, 'ÂΩìÂâçÈ°µÈù¢‰ø°ÊÅØ');
      } else {
        await this.bot.answerCallbackQuery(callbackQuery.id, 'Êú™Áü•Êìç‰Ωú');
      }
    } catch (error) {
      console.error('Â§ÑÁêÜÊñ∞ÈóªÂõûË∞ÉÂ§±Ë¥•:', error);
      await this.bot.answerCallbackQuery(callbackQuery.id, 'Êìç‰ΩúÂ§±Ë¥•ÔºåËØ∑ÈáçËØï');
    }
  }

  // Â§ÑÁêÜËøîÂõûÊñ∞Èóª‰∏ªËèúÂçï
  async handleNewsBack(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    
    try {
      await this.handleNewsCommand({ chat: { id: chatId } }, 1);
      await this.bot.answerCallbackQuery(callbackQuery.id, 'üîô Â∑≤ËøîÂõûÊñ∞Èóª‰∏ªËèúÂçï');
    } catch (error) {
      console.error('ËøîÂõûÊñ∞Èóª‰∏ªËèúÂçïÂ§±Ë¥•:', error);
      await this.bot.answerCallbackQuery(callbackQuery.id, '‚ùå ËøîÂõûÂ§±Ë¥•');
    }
  }

  // Â§ÑÁêÜ /web3 ÂëΩ‰ª§
  async handleWeb3Command(msg, page = 1) {
    const chatId = msg.chat.id;
    try {
      const { news, total, totalPages } = await newsService.getNewsList({ page, limit: this.PAGE_SIZE, search: 'web3' });
      let message = 'üï∏Ô∏è Web3 ËµÑËÆØ\n\n';
      if (!news || news.length === 0) {
        message += 'ÊöÇÊó†Êï∞ÊçÆÔºåÁÇπÂáª‰∏ãÊñπÊù•Ê∫êÊäìÂèñ„ÄÇ';
      } else {
        message += `(Á¨¨${page}È°µÔºåÂÖ±${totalPages}È°µ)\n\n`;
        news.forEach((item, index) => {
          const url = item.sourceUrl || '#';
          const title = item.title?.replace(/</g, '&lt;').replace(/>/g, '&gt;') || '';
          const globalIndex = (page - 1) * this.PAGE_SIZE + index + 1;
          message += `${globalIndex}. <a href="${url}">${title}</a>\n`;
          message += `   Êù•Ê∫êÔºö${item.source}\n`;
          message += `   Êó∂Èó¥Ôºö${new Date(item.publishTime).toLocaleString('zh-CN')}\n\n`;
        });
      }

      // Ê∑±Êã∑Ë¥ùÈîÆÁõòÂØπË±°ÔºåÈÅøÂÖç‰øÆÊîπÂéüÂßãÂØπË±°
      const keyboard = JSON.parse(JSON.stringify(WEB3_MAIN_KEYBOARD));

      // Ê∑ªÂä†ÂàÜÈ°µÊåâÈíÆ
      if (totalPages > 1) {
        const paginationRow = [];
        if (page > 1) {
          paginationRow.push({ text: '‚óÄÔ∏è ‰∏ä‰∏ÄÈ°µ', callback_data: `web3_page_${page - 1}` });
        }
        paginationRow.push({ text: `${page}/${totalPages}`, callback_data: 'page_info' });
        if (page < totalPages) {
          paginationRow.push({ text: '‰∏ã‰∏ÄÈ°µ ‚ñ∂Ô∏è', callback_data: `web3_page_${page + 1}` });
        }
        keyboard.inline_keyboard.push(paginationRow);
      }

      await this.bot.sendMessage(chatId, message, { 
        reply_markup: keyboard, 
        parse_mode: 'HTML', 
        disable_web_page_preview: true 
      });
    } catch (e) {
      console.error('Ëé∑Âèñ Web3 ËµÑËÆØÂ§±Ë¥•:', e);
      await this.bot.sendMessage(chatId, '‚ùå Ëé∑Âèñ Web3 ËµÑËÆØÂ§±Ë¥•ÔºåËØ∑ÈáçËØï');
    }
  }

  // ÊäìÂèñÂπ∂Â±ïÁ§∫Êüê‰∏™ Web3 Êù•Ê∫ê
  async handleWeb3Source(callbackQuery, sourceKey) {
    const chatId = callbackQuery.message.chat.id;
    try {
      await newsService.crawlWeb3(sourceKey, 15);
      const { news, total, totalPages } = await newsService.getNewsList({ page: 1, limit: this.PAGE_SIZE, search: 'web3' });
      if (!news || news.length === 0) {
        await this.bot.answerCallbackQuery(callbackQuery.id, 'ÊöÇÊó†Êï∞ÊçÆ');
        return;
      }

      let message = `üï∏Ô∏è ${sourceKey} ÊúÄÊñ∞ Web3 ËµÑËÆØ\n\n`;
      news.forEach((item, index) => {
        const url = item.sourceUrl || '#';
        const title = item.title?.replace(/</g, '&lt;').replace(/>/g, '&gt;') || '';
        message += `${index + 1}. <a href="${url}">${title}</a>\n`;
        message += `   Êù•Ê∫êÔºö${item.source}\n`;
        message += `   Êó∂Èó¥Ôºö${new Date(item.publishTime).toLocaleString('zh-CN')}\n\n`;
      });

      await this.bot.sendMessage(chatId, message, { reply_markup: WEB3_MAIN_KEYBOARD, parse_mode: 'HTML', disable_web_page_preview: true });
      await this.bot.answerCallbackQuery(callbackQuery.id, '‚úÖ Â∑≤Êõ¥Êñ∞ Web3 ËµÑËÆØ');
    } catch (e) {
      console.error('ÊäìÂèñ Web3 Êù•Ê∫êÂ§±Ë¥•:', e);
      await this.bot.answerCallbackQuery(callbackQuery.id, '‚ùå ÊäìÂèñÂ§±Ë¥•');
    }
  }

  // Web3 ÊêúÁ¥¢ËæìÂÖ•ÊèêÁ§∫
  async handleWeb3Search(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    try {
      await this.bot.sendMessage(chatId, 'üîç ËØ∑ËæìÂÖ• Web3 ÊêúÁ¥¢ÂÖ≥ÈîÆËØçÔºö');
      await this.bot.answerCallbackQuery(callbackQuery.id, 'üîç ËØ∑ËæìÂÖ•ÂÖ≥ÈîÆËØç');
    } catch (e) {
      console.error('Web3 ÊêúÁ¥¢ÊèêÁ§∫Â§±Ë¥•:', e);
      await this.bot.answerCallbackQuery(callbackQuery.id, '‚ùå Êìç‰ΩúÂ§±Ë¥•');
    }
  }

  // ÊâßË°å Web3 ÊêúÁ¥¢
  async executeWeb3Search(chatId, keyword, page = 1) {
    try {
      const { news, total, totalPages } = await newsService.searchNews(keyword, { page, limit: this.PAGE_SIZE });
      if (!news || news.length === 0) {
        await this.bot.sendMessage(chatId, `üîç Êú™ÊâæÂà∞‰∏é "${keyword}" Áõ∏ÂÖ≥ÁöÑ Web3 ËµÑËÆØ`);
        return;
      }
      let message = `üîç Web3 ÊêúÁ¥¢ "${keyword}" ÁªìÊûú (Á¨¨${page}È°µÔºåÂÖ±${totalPages}È°µ)Ôºö\n\n`;
      news.forEach((item, index) => {
        const url = item.sourceUrl || '#';
        const title = item.title?.replace(/</g, '&lt;').replace(/>/g, '&gt;') || '';
        const globalIndex = (page - 1) * this.PAGE_SIZE + index + 1;
        message += `${globalIndex}. <a href="${url}">${title}</a>\n`;
        message += `   Êù•Ê∫êÔºö${item.source}\n`;
        message += `   Êó∂Èó¥Ôºö${new Date(item.publishTime).toLocaleString('zh-CN')}\n\n`;
      });

      // Ê∑±Êã∑Ë¥ùÈîÆÁõòÂØπË±°ÔºåÈÅøÂÖç‰øÆÊîπÂéüÂßãÂØπË±°
      const keyboard = JSON.parse(JSON.stringify(WEB3_MAIN_KEYBOARD));

      // Ê∑ªÂä†ÂàÜÈ°µÊåâÈíÆ
      if (totalPages > 1) {
        const paginationRow = [];
        if (page > 1) {
          paginationRow.push({ text: '‚óÄÔ∏è ‰∏ä‰∏ÄÈ°µ', callback_data: `web3_search_page_${keyword}_${page - 1}` });
        }
        paginationRow.push({ text: `${page}/${totalPages}`, callback_data: 'page_info' });
        if (page < totalPages) {
          paginationRow.push({ text: '‰∏ã‰∏ÄÈ°µ ‚ñ∂Ô∏è', callback_data: `web3_search_page_${keyword}_${page + 1}` });
        }
        keyboard.inline_keyboard.push(paginationRow);
      }

      await this.bot.sendMessage(chatId, message, { 
        reply_markup: keyboard, 
        parse_mode: 'HTML', 
        disable_web_page_preview: true 
      });
    } catch (e) {
      console.error('ÊâßË°å Web3 ÊêúÁ¥¢Â§±Ë¥•:', e);
      await this.bot.sendMessage(chatId, '‚ùå ÊêúÁ¥¢Â§±Ë¥•ÔºåËØ∑ÈáçËØï');
    }
  }

  // Web3 ÂõûË∞ÉÂàÜÂèë
  async handleWeb3Callback(callbackQuery) {
    const data = callbackQuery.data;
    try {
      if (data === 'web3_chainfeeds') {
        await this.handleWeb3Source(callbackQuery, 'chainfeeds');
      } else if (data === 'web3_panews') {
        await this.handleWeb3Source(callbackQuery, 'panews');
      } else if (data === 'web3_investing') {
        await this.handleWeb3Source(callbackQuery, 'investing_cn');
      } else if (data === 'web3_search') {
        await this.handleWeb3Search(callbackQuery);
      } else if (data === 'web3_hot' || data === 'web3_latest') {
        // ÁÆÄÂçïÂ§çÁî®ÔºöÊúÄÊñ∞Âç≥ÊäìÂèñ‰∏âÊ∫ê
        await newsService.crawlWeb3('chainfeeds', 10).catch(()=>{});
        await newsService.crawlWeb3('panews', 10).catch(()=>{});
        await newsService.crawlWeb3('investing_cn', 10).catch(()=>{});
        const chatId = callbackQuery.message.chat.id;
        const { news, total, totalPages } = await newsService.getNewsList({ page: 1, limit: this.PAGE_SIZE, search: 'web3' });
        if (!news || news.length === 0) {
          await this.bot.answerCallbackQuery(callbackQuery.id, 'ÊöÇÊó†Êï∞ÊçÆ');
          return;
        }
        let message = 'üï∏Ô∏è ÊúÄÊñ∞ Web3 ËµÑËÆØ\n\n';
        news.forEach((item, index) => {
          const url = item.sourceUrl || '#';
          const title = item.title?.replace(/</g, '&lt;').replace(/>/g, '&gt;') || '';
          message += `${index + 1}. <a href="${url}">${title}</a>\n`;
          message += `   Êù•Ê∫êÔºö${item.source}\n`;
          message += `   Êó∂Èó¥Ôºö${new Date(item.publishTime).toLocaleString('zh-CN')}\n\n`;
        });

        // Ê∑±Êã∑Ë¥ùÈîÆÁõòÂØπË±°ÔºåÈÅøÂÖç‰øÆÊîπÂéüÂßãÂØπË±°
        const keyboard = JSON.parse(JSON.stringify(WEB3_MAIN_KEYBOARD));

        // Ê∑ªÂä†ÂàÜÈ°µÊåâÈíÆ
        if (totalPages > 1) {
          const paginationRow = [];
          paginationRow.push({ text: `1/${totalPages}`, callback_data: 'page_info' });
          if (totalPages > 1) {
            paginationRow.push({ text: '‰∏ã‰∏ÄÈ°µ ‚ñ∂Ô∏è', callback_data: `web3_page_2` });
          }
          keyboard.inline_keyboard.push(paginationRow);
        }

        await this.bot.sendMessage(chatId, message, { 
          reply_markup: keyboard, 
          parse_mode: 'HTML', 
          disable_web_page_preview: true 
        });
        await this.bot.answerCallbackQuery(callbackQuery.id, '‚úÖ Â∑≤Êõ¥Êñ∞');
      } else if (data.startsWith('web3_page_')) {
        // Â§ÑÁêÜ Web3 ÂàÜÈ°µ
        const page = parseInt(data.split('_')[2]);
        await this.handleWeb3Command(callbackQuery.message, page);
      } else if (data.startsWith('web3_search_page_')) {
        // Â§ÑÁêÜ Web3 ÊêúÁ¥¢ÂàÜÈ°µ
        const parts = data.split('_');
        const keyword = parts[3];
        const page = parseInt(parts[4]);
        await this.executeWeb3Search(callbackQuery.message.chat.id, keyword, page);
      }
    } catch (e) {
      console.error('Â§ÑÁêÜ Web3 ÂõûË∞ÉÂ§±Ë¥•:', e);
      await this.bot.answerCallbackQuery(callbackQuery.id, '‚ùå Êìç‰ΩúÂ§±Ë¥•');
    }
  }
}

module.exports = NewsHandler; 